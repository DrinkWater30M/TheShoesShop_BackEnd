// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TheShoesShop_BackEnd.Model;

public partial class TheShoesShopDbContext : DbContext
{
    public TheShoesShopDbContext(DbContextOptions<TheShoesShopDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<brand> brand { get; set; }

    public virtual DbSet<cartdetail> cartdetail { get; set; }

    public virtual DbSet<customer> customer { get; set; }

    public virtual DbSet<orderdetail> orderdetail { get; set; }

    public virtual DbSet<purchaseorder> purchaseorder { get; set; }

    public virtual DbSet<rate> rate { get; set; }

    public virtual DbSet<shoes> shoes { get; set; }

    public virtual DbSet<shoesmodel> shoesmodel { get; set; }

    public virtual DbSet<shoesmodelimage> shoesmodelimage { get; set; }

    public virtual DbSet<store> store { get; set; }

    public virtual DbSet<storeadmin> storeadmin { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8_vietnamese_ci")
            .HasCharSet("utf8mb3");

        modelBuilder.Entity<brand>(entity =>
        {
            entity.HasKey(e => e.BrandID).HasName("PRIMARY");

            entity.Property(e => e.BrandName)
                .IsRequired()
                .HasMaxLength(50)
                .UseCollation("utf8_general_ci");
        });

        modelBuilder.Entity<cartdetail>(entity =>
        {
            entity.HasKey(e => new { e.CustomerID, e.ShoesID })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasIndex(e => e.ShoesID, "CartDetail_FkShoesID");

            entity.HasOne(d => d.Customer).WithMany(p => p.cartdetail)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CartDetail_FkCustomerID");

            entity.HasOne(d => d.Shoes).WithMany(p => p.cartdetail)
                .HasForeignKey(d => d.ShoesID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CartDetail_FkShoesID");
        });

        modelBuilder.Entity<customer>(entity =>
        {
            entity.HasKey(e => e.CustomerID).HasName("PRIMARY");

            entity.Property(e => e.AccountStatus).HasDefaultValueSql("'0'");
            entity.Property(e => e.Address).HasColumnType("text");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .UseCollation("utf8_general_ci");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.HashPassword)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<orderdetail>(entity =>
        {
            entity.HasKey(e => new { e.PurchaseOrderID, e.ShoesID })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.HasIndex(e => e.ShoesID, "OrderDetail_FkShoesID");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.orderdetail)
                .HasForeignKey(d => d.PurchaseOrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OrderDetail_FkPurchaseOrderID");

            entity.HasOne(d => d.Shoes).WithMany(p => p.orderdetail)
                .HasForeignKey(d => d.ShoesID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("OrderDetail_FkShoesID");
        });

        modelBuilder.Entity<purchaseorder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderID).HasName("PRIMARY");

            entity.HasIndex(e => e.CustomerID, "PurchaseOrder_FkCustomerID");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(50)
                .UseCollation("utf8_general_ci");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.OrderTime).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.Customer).WithMany(p => p.purchaseorder)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PurchaseOrder_FkCustomerID");
        });

        modelBuilder.Entity<rate>(entity =>
        {
            entity.HasKey(e => e.RateID).HasName("PRIMARY");

            entity.HasIndex(e => e.CustomerID, "Rate_FkCustomerID");

            entity.HasIndex(e => e.ShoesModelID, "Rate_FkShoesModelID");

            entity.Property(e => e.Content).HasColumnType("text");
            entity.Property(e => e.RateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.rate)
                .HasForeignKey(d => d.CustomerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Rate_FkCustomerID");

            entity.HasOne(d => d.ShoesModel).WithMany(p => p.rate)
                .HasForeignKey(d => d.ShoesModelID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Rate_FkShoesModelID");
        });

        modelBuilder.Entity<shoes>(entity =>
        {
            entity.HasKey(e => e.ShoesID).HasName("PRIMARY");

            entity.HasIndex(e => e.ShoesModelID, "Shoes_FkShoesModelID");

            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .UseCollation("utf8_general_ci");
            entity.Property(e => e.ShoesStatus).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.ShoesModel).WithMany(p => p.shoes)
                .HasForeignKey(d => d.ShoesModelID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Shoes_FkShoesModelID");
        });

        modelBuilder.Entity<shoesmodel>(entity =>
        {
            entity.HasKey(e => e.ShoesModelID).HasName("PRIMARY");

            entity.HasIndex(e => e.BrandID, "ShoesModel_FkBrandID");

            entity.Property(e => e.ShoesModelDescription).HasColumnType("text");
            entity.Property(e => e.ShoesModelName)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ShoesModelStatus).HasDefaultValueSql("'0'");

            entity.HasOne(d => d.Brand).WithMany(p => p.shoesmodel)
                .HasForeignKey(d => d.BrandID)
                .HasConstraintName("ShoesModel_FkBrandID");
        });

        modelBuilder.Entity<shoesmodelimage>(entity =>
        {
            entity.HasKey(e => e.ImageID).HasName("PRIMARY");

            entity.HasIndex(e => e.ShoesModelID, "ShoesModelImage_FkShoesModelID");

            entity.Property(e => e.ImageLink)
                .HasMaxLength(200)
                .IsFixedLength();

            entity.HasOne(d => d.ShoesModel).WithMany(p => p.shoesmodelimage)
                .HasForeignKey(d => d.ShoesModelID)
                .HasConstraintName("ShoesModelImage_FkShoesModelID");
        });

        modelBuilder.Entity<store>(entity =>
        {
            entity.HasKey(e => e.StoreID).HasName("PRIMARY");

            entity.Property(e => e.Address).HasColumnType("text");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.StoreName)
                .HasMaxLength(50)
                .UseCollation("utf8_general_ci");
        });

        modelBuilder.Entity<storeadmin>(entity =>
        {
            entity.HasKey(e => e.StoreAdminID).HasName("PRIMARY");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.HashPassword)
                .IsRequired()
                .HasColumnType("text");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}